{"version":3,"sources":["components/Task.js","components/Process.js","components/TodoList.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["Task","className","this","props","parentEnabled","enabled","type","name","onClick","handleChange","checked","value","id","Component","styles","open","background","transitions","Process","state","expanded","showProps","handleExpand","setState","prevState","caret","key","duration","todoList","todo_list","tasks","processes","TodoList","renderItem","itemId","task","process","map","item","idx","Main","env","go_list","download","data","filename","file","Blob","a","document","createElement","url","URL","createObjectURL","href","body","appendChild","click","setTimeout","removeChild","window","revokeObjectURL","save","JSON","stringify","isProcess","event","target","split","prop","console","log","table","handleNameChange","e","Project","style","marginTop","marginBottom","onChange","label","App","fontSize","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.31454adb.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass Task extends Component {\n\n    render() {\n        let className = !this.props.parentEnabled || !this.props.enabled ? 'task dim' : 'task'\n        return (\n        <div className={className}>\n                     <input type=\"checkbox\" name={`${this.props.name}::enabled`} onClick={this.props.handleChange} checked={this.props['enabled']} value={this.props['enabled']}></input>\n            <code>{this.props.id}</code>\n        </div>\n        )\n    }\n}\n\nexport default Task\n\n// <div className=\"task\">\n// <input type=\"checkbox\" name=\"vehicle1\" value=\"Bike\"/>\n// Database Table\n// </div>\n// <div className=\"command\">\n// <input type=\"checkbox\" name=\"vehicle1\" value=\"Bike\"/>\n// <div>MakeMigrations</div>\n// </div>\n// <div className=\"command\">\n// <input type=\"checkbox\" name=\"vehicle1\" value=\"Bike\"/>\n// <div>Migrate</div>\n// </div>\n// <div className=\"task\">\n// <div>API Endpoint</div>\n// <input type=\"checkbox\" name=\"vehicle1\" value=\"Bike\"/>\n// </div>\n","import React, { Component, Fragment } from 'react'\nimport PropTypes from 'prop-types'\nimport TodoList from './TodoList'\nimport { AiOutlineCaretRight, AiOutlineCaretLeft } from \"react-icons/ai\";\nimport Expand from \"react-expand-animated\";\n\nconst styles = {\n    open: { background: \"#ecf0f1\" }\n  };\nconst transitions = [\"height\" ];\n\nclass Process extends Component {\n    state = {\n        expanded: false,\n        showProps: false,\n    }\n    static propTypes = {\n\n    }\n\n    handleExpand = () => {\n        this.setState(prevState => ({ expanded: !prevState.expanded }))\n    }\n\n    render() {\n        const { expanded } = this.state\n        const caret = expanded ?  <AiOutlineCaretRight/> : <AiOutlineCaretLeft/>\n        let className = !expanded ? 'process-expanded' : 'process'\n        const disabled = (!this.props.parentEnabled || !this.props.enabled)\n        if  (disabled) className += ' dim'\n        const fieldName = 'enabled'\n        return (\n            <div className={className} key={this.props.id}>\n                <Fragment>\n                    <div className=\"left-side-process\">\n                        <div className=\"process-label\">\n                            <input type=\"checkbox\" name={`${this.props.name}::${fieldName}`} onClick={this.props.handleChange} checked={this.props[fieldName]} value={this.props[fieldName]}></input>\n                            <code>{this.props.id}</code>\n                            <button className=\"caret\" onClick={this.handleExpand}>{caret}</button>\n                        </div>\n                    </div>\n                    <Expand\n                        open={expanded}\n                        duration={100}\n                        styles={styles}\n                        transitions={transitions}\n                    >\n                        <div className=\"right-side-process\">\n                            <TodoList\n                                todoList={this.props.todo_list}\n                                tasks={this.props.tasks}\n                                processes={this.props.processes}\n                                handleChange={this.props.handleChange}\n                                parentEnabled={this.props.parentEnabled && this.props.enabled}\n                            />\n                        </div>\n                    </Expand>\n\n                </Fragment>\n            </div>\n        )\n    }\n}\n\nexport default Process","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport Task from './Task'\nimport Process from './Process'\n\n\nclass TodoList extends Component {\n    static propTypes = {\n        todoList: PropTypes.array.isRequired,\n        processes: PropTypes.object.isRequired,\n        tasks: PropTypes.object.isRequired,\n    }\n\n    renderItem = (itemId) => {\n\n        if (itemId in this.props.tasks) {\n            const task = this.props.tasks[itemId]\n            return <Task {...this.props} {...task}/>\n        } else if (itemId in this.props.processes) {\n            const process = this.props.processes[itemId]\n            return <Process {...this.props} {...process}/>\n        }\n        else return (\n            <div>\n                Unrecognized ID in todo list! <code>{itemId}</code>\n            </div>\n        )\n    }\n\n    render() {\n        let className = 'todo-list'\n        if (!this.props.parentEnabled) className += ' dim'\n        return (\n            <div className={className}>\n                {this.props.todoList.map((item, idx) => {\n                    return this.renderItem(item)\n                })}\n            </div>\n        )\n    }\n}\n\nexport default TodoList","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport TodoList from './TodoList'\nimport Project from './../config.json'\n\n\n\n\nclass Main extends Component {\n    state = {\n        processes: {},\n        tasks: {},\n        env: {},\n        go_list: [],\n    }\n\n    componentDidMount() {\n        this.setState(Project)\n    }\n\n    download = (data, filename, type) => {\n        var file = new Blob([data], {type: type})\n        var a = document.createElement(\"a\")\n        var url = URL.createObjectURL(file)\n        a.href = url\n        a.download = filename\n        document.body.appendChild(a)\n        a.click()\n        setTimeout(function() {\n            document.body.removeChild(a)\n            window.URL.revokeObjectURL(url)\n        }, 0)\n    }\n\n    save = () => {\n        this.download(JSON.stringify(this.state), 'config.json', 'text/plain')\n    }\n\n    isProcess = id => id in this.state.processes\n\n    handleChange = event => {\n        const [ id, prop ] = event.target.name.split('::')\n        console.log(id, prop)\n        const table = this.isProcess(id) ? 'processes' : 'tasks'\n        this.setState(prevState => {\n            return {\n                [table]: {\n                    ...prevState[table],\n                    [id]: {\n                        ...prevState[table][id],\n                        enabled: !prevState[table][id][prop],\n                    }\n                }\n            }\n        })\n    }\n\n    handleNameChange = (e) => {\n        this.setState({'feature': e.target.value})\n    }\n\n    render() {\n        const {\n            processes,\n            tasks,\n            env,\n            go_list,\n        } = this.state\n        console.log(this.state)\n        return (\n            <div className=\"main\">\n                <div className=\"center-container\" style={{marginTop: '1rem', marginBottom: '1rem'}}>\n                    Project Name: <input onChange={this.handleNameChange} className=\"textbox\" type='text' name='feature' label='Project Name'/>\n                </div>\n\n                <TodoList\n                    processes={processes}\n                    tasks={tasks}\n                    env={env}\n                    todoList={go_list}\n                    handleChange={this.handleChange}\n                    parentEnabled\n                />\n                <div className=\"center-container\">\n                    <button onClick={this.save} className=\"save-button\">Save</button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Main","import React from 'react';\nimport './App.css';\nimport Main from './components/Main';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <header>\n        <code style={{ fontSize: 'small'}}>\n          robot.monkey.butler\n        </code>\n      </header>\n      <Main/>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}